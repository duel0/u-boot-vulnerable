name: "CodeQL Advanced with Custom Query"

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  schedule:
    - cron: '34 17 * * 0'

jobs:
  analyze:
    name: Analyze (${{ matrix.language }})
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
        - language: c-cpp
          build-mode: autobuild

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Crea la directory per le query personalizzate
    - name: Setup Custom Queries
      shell: bash
      run: |
        mkdir -p ./.github/codeql-custom-queries-cpp
        
        # Crea il file della query personalizzata
        cat << 'EOF' > ./.github/codeql-custom-queries-cpp/network-byte-swap.ql
        /**
         * @name Network byte swap vulnerability
         * @description Identifies network byte swap values that flow into memcpy size arguments
         * @kind path-problem
         * @id cpp/network-byte-swap-vulnerability
         * @problem.severity error
         * @tags security
         */
        import cpp
        import semmle.code.cpp.dataflow.TaintTracking
        
        class NetworkByteSwap extends Expr {
          NetworkByteSwap() {
            exists(MacroInvocation invocation |
              invocation.getMacro().getName().regexpMatch("ntoh.*") and
              invocation.getExpr() = this
            )
          }
        }
        
        module MyConfig implements DataFlow::ConfigSig {
          predicate isSource(DataFlow::Node source) {
            exists(Expr e | source.asExpr() = e and e instanceof NetworkByteSwap)
          }
          predicate isSink(DataFlow::Node sink) {
            exists(FunctionCall call |
              call.getTarget().hasName("memcpy") and
              sink.asExpr() = call.getArgument(2) 
            )
          }
          // Input validation
          predicate isBarrier(DataFlow::Node node) {
            node.asExpr().getEnclosingStmt() instanceof IfStmt
          }
        }
        
        module MyTaint = TaintTracking::Global<MyConfig>;
        
        import MyTaint::PathGraph
        
        from MyTaint::PathNode source, MyTaint::PathNode sink
        where MyTaint::flowPath(source, sink)
        select sink, source, sink, "Network byte swap flows to memcpy"
        EOF
        
        # Crea il file di configurazione qlpack.yml per le query personalizzate
        cat << 'EOF' > ./.github/codeql-custom-queries-cpp/qlpack.yml
        name: codeql-custom-queries-cpp
        version: 0.0.1
        libraryPathDependencies:
          - codeql/cpp-all
        EOF

    # Inizializza CodeQL con le query personalizzate
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}
        queries: ./.github/codeql-custom-queries-cpp

    - if: matrix.build-mode == 'manual'
      shell: bash
      run: |
        echo 'Replace this with your manual build commands if needed'
        exit 1

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

