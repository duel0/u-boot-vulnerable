name: "CodeQL Custom Query Analysis"

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  schedule:
    - cron: '0 8 * * 1'  # Esegui ogni lunedÃ¬ alle 8:00


jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'cpp' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    # Creare prima le directory e i file delle query
    - name: Create custom queries directory
      run: |
        mkdir -p .github/codeql/custom-queries/cpp
        
    - name: Write custom query
      run: |
        cat > .github/codeql/custom-queries/cpp/unsafe-network-data-memcpy.ql << 'EOL'
        /**
         * @name Unsafe network data to memcpy
         * @description Network byte-swapped data flows to memcpy size parameter without validation
         * @kind path-problem
         * @problem.severity error
         * @security-severity 8.0
         * @precision high
         * @id cpp/unsafe-network-data-memcpy
         * @tags security
         *       external/cwe/cwe-131
         */
        import cpp
        import semmle.code.cpp.dataflow.TaintTracking
        
        class NetworkByteSwap extends Expr {
          NetworkByteSwap() {
            exists(MacroInvocation invocation |
              invocation.getMacro().getName().regexpMatch("ntoh.*") and
              invocation.getExpr() = this
            )
          }
        }
        
        module MyConfig implements DataFlow::ConfigSig {
          predicate isSource(DataFlow::Node source) {
            exists(Expr e | source.asExpr() = e and e instanceof NetworkByteSwap)
          }
          predicate isSink(DataFlow::Node sink) {
            exists(FunctionCall call |
              call.getTarget().hasName("memcpy") and
              sink.asExpr() = call.getArgument(2)
            )
          }
          predicate isBarrier(DataFlow::Node node) {
            node.asExpr().getEnclosingStmt() instanceof IfStmt
          }
        }
        
        module MyTaint = TaintTracking::Global<MyConfig>;
        import MyTaint::PathGraph
        
        from MyTaint::PathNode source, MyTaint::PathNode sink
        where MyTaint::flowPath(source, sink)
        select sink, source, sink, "Network byte swap flows to memcpy size parameter without validation"
        EOL

    - name: Create query suite
      run: |
        cat > .github/codeql/custom-queries/cpp-custom-queries.qls << 'EOL'
        # Reusing existing queries
        - import: codeql-suites/cpp-security-extended.qls
          from: codeql-cpp
        # Adding custom queries
        - queries: .
          from: .github/codeql/custom-queries/cpp
        EOL

    # Inizializzare CodeQL dopo aver creato i file delle query
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: ./.github/codeql/custom-queries/cpp-custom-queries.qls

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"
